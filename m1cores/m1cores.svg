<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="640" height="480" onload="init_SgJUrFsLofipidaQ(evt)" viewBox="0 0 640 480" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="svg_SgJUrFsLofipidaQ">

<style>
.small {
    font-family: monospace;
    font-size: 10px;
}
.y_axis_labels {
  font-size: 12px;
  text-anchor: left;
  dominant-baseline: middle;
}
.axis_caption {
  font-size: 12px;
  text-anchor: middle;
  dominant-baseline: middle;
}
</style>

<script type="text/ecmascript">
<![CDATA[
function init_SgJUrFsLofipidaQ(evt) {
  let svg = document.getElementById("svg_SgJUrFsLofipidaQ");
  let elements = [];

  function add_primitive(p) {
    svg.appendChild(p);
    elements.push(p);
    return p;
  }

  function clear() {
    elements.forEach(node => {
      svg.removeChild(node);
    });
    elements = [];
  }


const conf = {
  filter: (row) => { return true; },
  facets: {
    x: (row) => { return row[0]; },
    y: (row) => { return row[2]; },
  },
  aggregations: {
    color: (row) => { return row[1]; },
  },
  y: (row) => { return +row[5]; },
  x: (row) => { return Math.log2(row[1]); },
  axis: 'free',
};
var data = [["firestorm","1","time","131071","207454000","1582.760489"],["firestorm","1","time","262143","387599000","1478.578486"],["firestorm","1","time","131071","205285000","1566.212206"],["firestorm","1","time","262143","392383000","1496.828067"],["firestorm","1","time","131071","203392000","1551.769652"],["firestorm","1","time","262143","390971000","1491.441694"],["firestorm","1","time","262143","394080000","1503.301633"],["firestorm","1","time","262143","376799000","1437.379598"],["firestorm","1","time","262143","380361000","1450.967602"],["firestorm","1","time","262143","393118000","1499.631880"],["icestorm","1","time","32767","236986000","7232.459487"],["icestorm","1","time","32767","283397000","8648.854030"],["icestorm","1","time","32767","251936000","7688.711203"],["icestorm","1","time","32767","252777000","7714.377270"],["icestorm","1","time","32767","272060000","8302.865688"],["icestorm","1","time","32767","234383000","7153.019807"],["icestorm","1","time","32767","274069000","8364.177374"],["icestorm","1","time","32767","258608000","7892.330699"],["icestorm","1","time","32767","277089000","8456.343272"],["icestorm","1","time","32767","242497000","7400.646992"],["firestorm","2","time","131071","284347000","2169.411998"],["firestorm","2","time","131071","240502000","1834.898643"],["firestorm","2","time","131071","241992000","1846.266527"],["firestorm","2","time","131071","243272000","1856.032227"],["firestorm","2","time","131071","244673000","1866.721090"],["firestorm","2","time","131071","244244000","1863.448055"],["firestorm","2","time","131071","244959000","1868.903114"],["firestorm","2","time","131071","244006000","1861.632245"],["firestorm","2","time","131071","243224000","1855.666013"],["firestorm","2","time","131071","242220000","1848.006043"],["icestorm","2","time","65535","439858000","6711.802853"],["icestorm","2","time","65535","443035000","6760.280766"],["icestorm","2","time","32767","251461000","7674.214911"],["icestorm","2","time","32767","260257000","7942.655721"],["icestorm","2","time","32767","237771000","7256.416517"],["icestorm","2","time","32767","257090000","7846.003601"],["icestorm","2","time","32767","211123000","6443.159276"],["icestorm","2","time","32767","218714000","6674.825282"],["icestorm","2","time","32767","252030000","7691.579943"],["icestorm","2","time","32767","264682000","8077.700125"],["firestorm","4","time","131071","273655000","2087.837889"],["firestorm","4","time","131071","243844000","1860.396274"],["firestorm","4","time","131071","239831000","1829.779280"],["firestorm","4","time","131071","243017000","1854.086716"],["firestorm","4","time","131071","242149000","1847.464351"],["firestorm","4","time","131071","240395000","1834.082291"],["firestorm","4","time","131071","243257000","1855.917785"],["firestorm","4","time","131071","241547000","1842.871421"],["firestorm","4","time","131071","243753000","1859.701994"],["firestorm","4","time","131071","240562000","1835.356410"],["icestorm","4","time","32767","199173000","6078.463088"],["icestorm","4","time","32767","240665000","7344.737083"],["icestorm","4","time","65535","412832000","6299.412528"],["icestorm","4","time","32767","202955000","6193.884091"],["icestorm","4","time","32767","240839000","7350.047304"],["icestorm","4","time","32767","249906000","7626.758629"],["icestorm","4","time","32767","215539000","6577.929014"],["icestorm","4","time","32767","238440000","7276.833399"],["icestorm","4","time","32767","213710000","6522.110660"],["icestorm","4","time","32767","261330000","7975.402081"],["firestorm","8","time","131071","277951000","2120.614018"],["firestorm","8","time","131071","248103000","1892.890113"],["firestorm","8","time","131071","226712000","1729.688489"],["firestorm","8","time","131071","246931000","1883.948394"],["firestorm","8","time","131071","249066000","1900.237276"],["firestorm","8","time","131071","236876000","1807.234247"],["firestorm","8","time","131071","251492000","1918.746328"],["firestorm","8","time","131071","246032000","1877.089516"],["firestorm","8","time","131071","243125000","1854.910697"],["firestorm","8","time","131071","248486000","1895.812193"],["icestorm","8","time","65535","330013000","5035.675593"],["icestorm","8","time","65535","376817000","5749.858854"],["icestorm","8","time","32767","257782000","7867.122410"],["icestorm","8","time","32767","209610000","6396.984771"],["icestorm","8","time","32767","257407000","7855.677969"],["icestorm","8","time","32767","211945000","6468.245491"],["icestorm","8","time","32767","226951000","6926.206244"],["icestorm","8","time","32767","216846000","6617.816706"],["icestorm","8","time","32767","248928000","7596.911527"],["icestorm","8","time","32767","267617000","8167.271950"],["firestorm","16","time","131071","288442000","2200.654607"],["firestorm","16","time","131071","232742000","1775.694089"],["firestorm","16","time","131071","234185000","1786.703390"],["firestorm","16","time","131071","245399000","1872.260073"],["firestorm","16","time","131071","242195000","1847.815306"],["firestorm","16","time","131071","241673000","1843.832732"],["firestorm","16","time","131071","230749000","1760.488590"],["firestorm","16","time","131071","249738000","1905.364268"],["firestorm","16","time","131071","239558000","1827.696439"],["firestorm","16","time","131071","235740000","1798.567189"],["icestorm","16","time","32767","204295000","6234.778893"],["icestorm","16","time","65535","357447000","5454.291600"],["icestorm","16","time","65535","370636000","5655.542840"],["icestorm","16","time","32767","232878000","7107.089450"],["icestorm","16","time","32767","236332000","7212.500381"],["icestorm","16","time","32767","226095000","6900.082400"],["icestorm","16","time","65535","412893000","6300.343328"],["icestorm","16","time","32767","231654000","7069.734794"],["icestorm","16","time","32767","245150000","7481.612598"],["icestorm","16","time","32767","229592000","7006.805628"],["firestorm","32","time","131071","288561000","2201.562512"],["firestorm","32","time","131071","236705000","1805.929611"],["firestorm","32","time","131071","244810000","1867.766325"],["firestorm","32","time","131071","242710000","1851.744474"],["firestorm","32","time","131071","241590000","1843.199487"],["firestorm","32","time","131071","235905000","1799.826048"],["firestorm","32","time","131071","248749000","1897.818739"],["firestorm","32","time","131071","248511000","1896.002930"],["firestorm","32","time","131071","251114000","1915.862395"],["firestorm","32","time","131071","244617000","1866.293841"],["icestorm","32","time","65535","393888000","6010.345617"],["icestorm","32","time","32767","202188000","6170.476394"],["icestorm","32","time","32767","222521000","6791.009247"],["icestorm","32","time","32767","237283000","7241.523484"],["icestorm","32","time","32767","233207000","7117.130039"],["icestorm","32","time","32767","222381000","6786.736656"],["icestorm","32","time","32767","202131000","6168.736839"],["icestorm","32","time","32767","230046000","7020.661031"],["icestorm","32","time","32767","229722000","7010.773034"],["icestorm","32","time","32767","234952000","7170.384838"],["firestorm","64","time","131071","291708000","2225.572400"],["firestorm","64","time","131071","238482000","1819.487148"],["firestorm","64","time","131071","249643000","1904.639470"],["firestorm","64","time","131071","243274000","1856.047486"],["firestorm","64","time","131071","242874000","1852.995705"],["firestorm","64","time","131071","244152000","1862.746145"],["firestorm","64","time","131071","250556000","1911.605161"],["firestorm","64","time","131071","250245000","1909.232401"],["firestorm","64","time","131071","242112000","1847.182062"],["firestorm","64","time","131071","240502000","1834.898643"],["icestorm","64","time","65535","406138000","6197.268635"],["icestorm","64","time","32767","201535000","6150.547807"],["icestorm","64","time","32767","218073000","6655.262917"],["icestorm","64","time","32767","250002000","7629.688406"],["icestorm","64","time","32767","208978000","6377.697073"],["icestorm","64","time","32767","214574000","6548.478652"],["icestorm","64","time","32767","228994000","6988.555559"],["icestorm","64","time","32767","228575000","6975.768303"],["icestorm","64","time","32767","225888000","6893.765069"],["icestorm","64","time","32767","223454000","6819.483016"],["firestorm","128","time","131071","292932000","2234.910850"],["firestorm","128","time","131071","251819000","1921.241159"],["firestorm","128","time","131071","248730000","1897.673780"],["firestorm","128","time","131071","240375000","1833.929702"],["firestorm","128","time","131071","234944000","1792.494144"],["firestorm","128","time","131071","245804000","1875.350001"],["firestorm","128","time","131071","245159000","1870.429004"],["firestorm","128","time","131071","243550000","1858.153215"],["firestorm","128","time","131071","243146000","1855.070916"],["firestorm","128","time","131071","246938000","1884.001801"],["icestorm","128","time","65535","401062000","6119.813840"],["icestorm","128","time","32767","204362000","6236.823634"],["icestorm","128","time","32767","236343000","7212.836085"],["icestorm","128","time","32767","237397000","7245.002594"],["icestorm","128","time","32767","218577000","6670.644246"],["icestorm","128","time","32767","217411000","6635.059664"],["icestorm","128","time","32767","217389000","6634.388256"],["icestorm","128","time","32767","230572000","7036.713767"],["icestorm","128","time","32767","251146000","7664.601581"],["icestorm","128","time","32767","231290000","7058.626057"],["firestorm","1","kperf:cycles","131071","626298559","4778.315257"],["firestorm","1","kperf:cycles","262143","1241754988","4736.937427"],["firestorm","1","kperf:cycles","131071","647381557","4939.166993"],["firestorm","1","kperf:cycles","262143","1203145718","4589.654189"],["firestorm","1","kperf:cycles","262143","1217187501","4643.219544"],["firestorm","1","kperf:cycles","131071","631188085","4815.619664"],["firestorm","1","kperf:cycles","262143","1207704417","4607.044312"],["firestorm","1","kperf:cycles","262143","1197293890","4567.331151"],["firestorm","1","kperf:cycles","131071","653421477","4985.248278"],["firestorm","1","kperf:cycles","262143","1210637960","4618.234933"],["icestorm","1","kperf:cycles","32767","281216667","8582.313517"],["icestorm","1","kperf:cycles","32767","281658364","8595.793451"],["icestorm","1","kperf:cycles","32767","281529120","8591.849116"],["icestorm","1","kperf:cycles","32767","284609565","8685.859706"],["icestorm","1","kperf:cycles","32767","283149635","8641.304819"],["icestorm","1","kperf:cycles","32767","283273692","8645.090854"],["icestorm","1","kperf:cycles","32767","283438026","8650.106082"],["icestorm","1","kperf:cycles","32767","283098202","8639.735160"],["icestorm","1","kperf:cycles","32767","283051321","8638.304422"],["icestorm","1","kperf:cycles","32767","283110827","8640.120457"],["firestorm","2","kperf:cycles","131071","765862344","5843.110558"],["firestorm","2","kperf:cycles","131071","763044783","5821.614110"],["firestorm","2","kperf:cycles","131071","763875735","5827.953819"],["firestorm","2","kperf:cycles","131071","760737977","5804.014443"],["firestorm","2","kperf:cycles","131071","765499116","5840.339328"],["firestorm","2","kperf:cycles","131071","761655512","5811.014732"],["firestorm","2","kperf:cycles","131071","758495484","5786.905448"],["firestorm","2","kperf:cycles","131071","757115456","5776.376590"],["firestorm","2","kperf:cycles","131071","764646596","5833.835066"],["firestorm","2","kperf:cycles","131071","756060567","5768.328364"],["icestorm","2","kperf:cycles","65535","519731857","7930.599786"],["icestorm","2","kperf:cycles","32767","261775521","7988.998718"],["icestorm","2","kperf:cycles","32767","260867175","7961.277352"],["icestorm","2","kperf:cycles","32767","261372225","7976.690725"],["icestorm","2","kperf:cycles","32767","260525442","7950.848170"],["icestorm","2","kperf:cycles","32767","261793910","7989.559923"],["icestorm","2","kperf:cycles","32767","261171469","7970.563952"],["icestorm","2","kperf:cycles","32767","261090137","7968.081820"],["icestorm","2","kperf:cycles","32767","261726291","7987.496292"],["icestorm","2","kperf:cycles","32767","261577102","7982.943266"],["firestorm","4","kperf:cycles","131071","760344303","5801.010925"],["firestorm","4","kperf:cycles","131071","758552608","5787.341273"],["firestorm","4","kperf:cycles","131071","764411142","5832.038681"],["firestorm","4","kperf:cycles","131071","764469650","5832.485065"],["firestorm","4","kperf:cycles","131071","746399701","5694.621243"],["firestorm","4","kperf:cycles","131071","762698292","5818.970573"],["firestorm","4","kperf:cycles","131071","754631778","5757.427486"],["firestorm","4","kperf:cycles","131071","743092732","5669.390880"],["firestorm","4","kperf:cycles","131071","760531850","5802.441806"],["firestorm","4","kperf:cycles","131071","756380912","5770.772421"],["icestorm","4","kperf:cycles","32767","249772367","7622.680349"],["icestorm","4","kperf:cycles","32767","249761372","7622.344798"],["icestorm","4","kperf:cycles","32767","252311047","7700.157079"],["icestorm","4","kperf:cycles","32767","251206290","7666.441542"],["icestorm","4","kperf:cycles","32767","252258755","7698.561205"],["icestorm","4","kperf:cycles","32767","251319123","7669.885037"],["icestorm","4","kperf:cycles","32767","251004325","7660.277871"],["icestorm","4","kperf:cycles","32767","250077278","7631.985778"],["icestorm","4","kperf:cycles","32767","250694481","7650.821894"],["icestorm","4","kperf:cycles","32767","250450948","7643.389630"],["firestorm","8","kperf:cycles","131071","750656818","5727.100716"],["firestorm","8","kperf:cycles","131071","725051395","5531.745352"],["firestorm","8","kperf:cycles","131071","788794867","6018.073159"],["firestorm","8","kperf:cycles","131071","742311419","5663.429889"],["firestorm","8","kperf:cycles","131071","757541444","5779.626645"],["firestorm","8","kperf:cycles","131071","739668142","5643.263132"],["firestorm","8","kperf:cycles","131071","769514132","5870.971702"],["firestorm","8","kperf:cycles","131071","744181384","5677.696699"],["firestorm","8","kperf:cycles","131071","741513639","5657.343264"],["firestorm","8","kperf:cycles","131071","762808272","5819.809660"],["icestorm","8","kperf:cycles","65535","494290775","7542.393759"],["icestorm","8","kperf:cycles","32767","249400561","7611.333384"],["icestorm","8","kperf:cycles","32767","251027839","7660.995483"],["icestorm","8","kperf:cycles","32767","248432411","7581.786889"],["icestorm","8","kperf:cycles","65535","496717754","7579.427085"],["icestorm","8","kperf:cycles","32767","249596459","7617.311899"],["icestorm","8","kperf:cycles","32767","249121883","7602.828547"],["icestorm","8","kperf:cycles","65535","496334787","7573.583383"],["icestorm","8","kperf:cycles","32767","248365358","7579.740532"],["icestorm","8","kperf:cycles","65535","498104460","7600.586862"],["firestorm","16","kperf:cycles","131071","758806471","5789.278109"],["firestorm","16","kperf:cycles","131071","780373374","5953.821776"],["firestorm","16","kperf:cycles","131071","787134401","6005.404712"],["firestorm","16","kperf:cycles","131071","768783114","5865.394435"],["firestorm","16","kperf:cycles","131071","747767186","5705.054406"],["firestorm","16","kperf:cycles","131071","762804181","5819.778448"],["firestorm","16","kperf:cycles","131071","752512952","5741.262003"],["firestorm","16","kperf:cycles","131071","769905521","5873.957786"],["firestorm","16","kperf:cycles","131071","753076411","5745.560887"],["firestorm","16","kperf:cycles","131071","772907088","5896.858100"],["icestorm","16","kperf:cycles","32767","245488305","7491.937162"],["icestorm","16","kperf:cycles","32767","246511319","7523.158025"],["icestorm","16","kperf:cycles","65535","491671154","7502.420905"],["icestorm","16","kperf:cycles","32767","245695851","7498.271157"],["icestorm","16","kperf:cycles","32767","245538375","7493.465224"],["icestorm","16","kperf:cycles","32767","246029772","7508.461928"],["icestorm","16","kperf:cycles","32767","246636458","7526.977081"],["icestorm","16","kperf:cycles","32767","247294180","7547.049776"],["icestorm","16","kperf:cycles","32767","247531228","7554.284127"],["icestorm","16","kperf:cycles","32767","247387369","7549.893765"],["firestorm","32","kperf:cycles","131071","766506004","5848.021332"],["firestorm","32","kperf:cycles","131071","772418716","5893.132089"],["firestorm","32","kperf:cycles","131071","769141640","5868.129792"],["firestorm","32","kperf:cycles","131071","782832430","5972.583028"],["firestorm","32","kperf:cycles","131071","759272597","5792.834395"],["firestorm","32","kperf:cycles","131071","760942074","5805.571591"],["firestorm","32","kperf:cycles","131071","748008205","5706.893249"],["firestorm","32","kperf:cycles","131071","752410138","5740.477588"],["firestorm","32","kperf:cycles","131071","780675523","5956.127007"],["firestorm","32","kperf:cycles","131071","784197423","5982.997177"],["icestorm","32","kperf:cycles","65535","486994575","7431.060883"],["icestorm","32","kperf:cycles","65535","489568645","7470.338674"],["icestorm","32","kperf:cycles","32767","244636823","7465.951201"],["icestorm","32","kperf:cycles","32767","244694279","7467.704672"],["icestorm","32","kperf:cycles","32767","244669687","7466.954161"],["icestorm","32","kperf:cycles","32767","244640455","7466.062044"],["icestorm","32","kperf:cycles","32767","244528880","7462.656941"],["icestorm","32","kperf:cycles","32767","245130335","7481.012452"],["icestorm","32","kperf:cycles","32767","244980741","7476.447066"],["icestorm","32","kperf:cycles","65535","495963952","7567.924804"],["firestorm","64","kperf:cycles","131071","783106405","5974.673307"],["firestorm","64","kperf:cycles","131071","746997578","5699.182718"],["firestorm","64","kperf:cycles","131071","775494344","5916.597447"],["firestorm","64","kperf:cycles","131071","774212480","5906.817526"],["firestorm","64","kperf:cycles","131071","777929421","5935.175752"],["firestorm","64","kperf:cycles","131071","750522381","5726.075036"],["firestorm","64","kperf:cycles","131071","769123410","5867.990707"],["firestorm","64","kperf:cycles","131071","767733203","5857.384189"],["firestorm","64","kperf:cycles","131071","778191436","5937.174783"],["firestorm","64","kperf:cycles","131071","786336337","5999.315920"],["icestorm","64","kperf:cycles","65535","486417685","7422.258106"],["icestorm","64","kperf:cycles","65535","486734610","7427.094072"],["icestorm","64","kperf:cycles","32767","243934906","7444.529740"],["icestorm","64","kperf:cycles","32767","244406542","7458.923368"],["icestorm","64","kperf:cycles","32767","244149503","7451.078921"],["icestorm","64","kperf:cycles","32767","243868919","7442.515915"],["icestorm","64","kperf:cycles","32767","244994936","7476.880276"],["icestorm","64","kperf:cycles","32767","248230027","7575.610431"],["icestorm","64","kperf:cycles","32767","245569624","7494.418897"],["icestorm","64","kperf:cycles","65535","488939488","7460.738354"],["firestorm","128","kperf:cycles","131071","740977258","5653.250971"],["firestorm","128","kperf:cycles","131071","761175645","5807.353610"],["firestorm","128","kperf:cycles","131071","762843613","5820.079293"],["firestorm","128","kperf:cycles","131071","733014186","5592.497089"],["firestorm","128","kperf:cycles","131071","778290267","5937.928810"],["firestorm","128","kperf:cycles","131071","781657817","5963.621373"],["firestorm","128","kperf:cycles","131071","781811893","5964.796889"],["firestorm","128","kperf:cycles","131071","766310935","5846.533062"],["firestorm","128","kperf:cycles","131071","771117933","5883.207826"],["firestorm","128","kperf:cycles","131071","774854160","5911.713194"],["icestorm","128","kperf:cycles","65535","485386417","7406.521965"],["icestorm","128","kperf:cycles","65535","486679650","7426.255436"],["icestorm","128","kperf:cycles","32767","244225486","7453.397809"],["icestorm","128","kperf:cycles","65535","490301885","7481.527199"],["icestorm","128","kperf:cycles","32767","244989123","7476.702872"],["icestorm","128","kperf:cycles","32767","246160568","7512.453627"],["icestorm","128","kperf:cycles","65535","488416238","7452.754070"],["icestorm","128","kperf:cycles","32767","245622639","7496.036836"],["icestorm","128","kperf:cycles","32767","247823159","7563.193426"],["icestorm","128","kperf:cycles","65535","488088226","7447.748928"],["firestorm","1","kperf:instructions","131071","2685011247","20485.166414"],["firestorm","1","kperf:instructions","262143","5369983714","20484.940334"],["firestorm","1","kperf:instructions","262143","5370049604","20485.191685"],["firestorm","1","kperf:instructions","262143","5369583898","20483.415151"],["firestorm","1","kperf:instructions","131071","2685250370","20486.990791"],["firestorm","1","kperf:instructions","262143","5370869321","20488.318670"],["firestorm","1","kperf:instructions","262143","5370166359","20485.637072"],["firestorm","1","kperf:instructions","262143","5369870008","20484.506578"],["firestorm","1","kperf:instructions","262143","5369811167","20484.282117"],["firestorm","1","kperf:instructions","131071","2685076821","20485.666707"],["icestorm","1","kperf:instructions","32767","673382657","20550.634999"],["icestorm","1","kperf:instructions","32767","674670391","20589.934721"],["icestorm","1","kperf:instructions","32767","675025393","20600.768853"],["icestorm","1","kperf:instructions","32767","674284292","20578.151555"],["icestorm","1","kperf:instructions","32767","674937727","20598.093417"],["icestorm","1","kperf:instructions","32767","674990418","20599.701468"],["icestorm","1","kperf:instructions","32767","675124298","20603.787286"],["icestorm","1","kperf:instructions","32767","675351386","20610.717673"],["icestorm","1","kperf:instructions","32767","675686674","20620.950163"],["icestorm","1","kperf:instructions","32767","674359532","20580.447768"],["firestorm","2","kperf:instructions","131071","2483897886","18950.781531"],["firestorm","2","kperf:instructions","131071","2483957567","18951.236864"],["firestorm","2","kperf:instructions","131071","2483938830","18951.093911"],["firestorm","2","kperf:instructions","131071","2483996251","18951.532002"],["firestorm","2","kperf:instructions","131071","2483912393","18950.892211"],["firestorm","2","kperf:instructions","131071","2483960121","18951.256350"],["firestorm","2","kperf:instructions","131071","2483935162","18951.065926"],["firestorm","2","kperf:instructions","131071","2484266030","18953.590268"],["firestorm","2","kperf:instructions","131071","2483908969","18950.866088"],["firestorm","2","kperf:instructions","131071","2483733954","18949.530819"],["icestorm","2","kperf:instructions","32767","622908456","19010.237617"],["icestorm","2","kperf:instructions","32767","624467604","19057.820490"],["icestorm","2","kperf:instructions","32767","624198006","19049.592761"],["icestorm","2","kperf:instructions","32767","625021593","19074.727409"],["icestorm","2","kperf:instructions","32767","624915666","19071.494675"],["icestorm","2","kperf:instructions","32767","624331448","19053.665212"],["icestorm","2","kperf:instructions","32767","624778891","19067.320505"],["icestorm","2","kperf:instructions","32767","624944700","19072.380749"],["icestorm","2","kperf:instructions","32767","626340191","19114.969054"],["icestorm","2","kperf:instructions","32767","623826512","19038.255318"],["firestorm","4","kperf:instructions","131071","2383132018","18181.993103"],["firestorm","4","kperf:instructions","131071","2383257297","18182.948913"],["firestorm","4","kperf:instructions","131071","2383214635","18182.623425"],["firestorm","4","kperf:instructions","131071","2383611923","18185.654515"],["firestorm","4","kperf:instructions","131071","2383334992","18183.541684"],["firestorm","4","kperf:instructions","131071","2383078855","18181.587498"],["firestorm","4","kperf:instructions","131071","2383100954","18181.756102"],["firestorm","4","kperf:instructions","131071","2383391789","18183.975014"],["firestorm","4","kperf:instructions","131071","2383387949","18183.945716"],["firestorm","4","kperf:instructions","131071","2383147142","18182.108491"],["icestorm","4","kperf:instructions","65535","1194495197","18226.828367"],["icestorm","4","kperf:instructions","32767","598840572","18275.721671"],["icestorm","4","kperf:instructions","32767","598924276","18278.276193"],["icestorm","4","kperf:instructions","65535","1197250644","18268.873793"],["icestorm","4","kperf:instructions","32767","599469551","18294.917173"],["icestorm","4","kperf:instructions","32767","598880400","18276.937162"],["icestorm","4","kperf:instructions","32767","599304637","18289.884243"],["icestorm","4","kperf:instructions","32767","600042458","18312.401440"],["icestorm","4","kperf:instructions","65535","1201346224","18331.368338"],["icestorm","4","kperf:instructions","32767","599031434","18281.546495"],["firestorm","8","kperf:instructions","131071","2333061968","17799.986023"],["firestorm","8","kperf:instructions","131071","2332870905","17798.528317"],["firestorm","8","kperf:instructions","131071","2332865794","17798.489323"],["firestorm","8","kperf:instructions","131071","2333017973","17799.650365"],["firestorm","8","kperf:instructions","131071","2332922244","17798.920005"],["firestorm","8","kperf:instructions","131071","2332630100","17796.691106"],["firestorm","8","kperf:instructions","131071","2333060912","17799.977966"],["firestorm","8","kperf:instructions","131071","2333612635","17804.187311"],["firestorm","8","kperf:instructions","131071","2332713865","17797.330187"],["firestorm","8","kperf:instructions","131071","2332604046","17796.492329"],["icestorm","8","kperf:instructions","65535","1171537508","17876.516487"],["icestorm","8","kperf:instructions","65535","1178056834","17975.995026"],["icestorm","8","kperf:instructions","65535","1173235478","17902.425849"],["icestorm","8","kperf:instructions","32767","587359657","17925.341258"],["icestorm","8","kperf:instructions","65535","1174229094","17917.587457"],["icestorm","8","kperf:instructions","65535","1174853588","17927.116625"],["icestorm","8","kperf:instructions","32767","589605970","17993.895383"],["icestorm","8","kperf:instructions","32767","588258652","17952.777245"],["icestorm","8","kperf:instructions","32767","587899315","17941.810816"],["icestorm","8","kperf:instructions","32767","587903589","17941.941252"],["firestorm","16","kperf:instructions","131071","2308269467","17610.832808"],["firestorm","16","kperf:instructions","131071","2307631421","17605.964866"],["firestorm","16","kperf:instructions","131071","2307753295","17606.894698"],["firestorm","16","kperf:instructions","131071","2307859093","17607.701879"],["firestorm","16","kperf:instructions","131071","2307778638","17607.088052"],["firestorm","16","kperf:instructions","131071","2307754152","17606.901237"],["firestorm","16","kperf:instructions","131071","2307893162","17607.961807"],["firestorm","16","kperf:instructions","131071","2307879367","17607.856559"],["firestorm","16","kperf:instructions","131071","2307835301","17607.520359"],["firestorm","16","kperf:instructions","131071","2307765897","17606.990845"],["icestorm","16","kperf:instructions","65535","1158317709","17674.795285"],["icestorm","16","kperf:instructions","65535","1158208373","17673.126925"],["icestorm","16","kperf:instructions","32767","579811916","17694.995453"],["icestorm","16","kperf:instructions","32767","580677793","17721.420728"],["icestorm","16","kperf:instructions","32767","579847571","17696.083590"],["icestorm","16","kperf:instructions","32767","581043686","17732.587237"],["icestorm","16","kperf:instructions","65535","1160227914","17703.943145"],["icestorm","16","kperf:instructions","32767","580242957","17708.150182"],["icestorm","16","kperf:instructions","65535","1159967604","17699.971069"],["icestorm","16","kperf:instructions","32767","579716977","17692.098056"],["firestorm","32","kperf:instructions","131071","2295295366","17511.847518"],["firestorm","32","kperf:instructions","131071","2295017803","17509.729864"],["firestorm","32","kperf:instructions","131071","2294997304","17509.573468"],["firestorm","32","kperf:instructions","131071","2294937869","17509.120011"],["firestorm","32","kperf:instructions","131071","2295286800","17511.782164"],["firestorm","32","kperf:instructions","131071","2295471241","17513.189348"],["firestorm","32","kperf:instructions","131071","2295187593","17511.025269"],["firestorm","32","kperf:instructions","131071","2295184055","17510.998276"],["firestorm","32","kperf:instructions","131071","2295405495","17512.687742"],["firestorm","32","kperf:instructions","131071","2296075557","17517.799948"],["icestorm","32","kperf:instructions","65535","1150813114","17560.282506"],["icestorm","32","kperf:instructions","65535","1152307913","17583.091676"],["icestorm","32","kperf:instructions","32767","578316526","17649.358379"],["icestorm","32","kperf:instructions","65535","1154506392","17616.638315"],["icestorm","32","kperf:instructions","32767","576399571","17590.855770"],["icestorm","32","kperf:instructions","32767","576674166","17599.236000"],["icestorm","32","kperf:instructions","32767","576489086","17593.587634"],["icestorm","32","kperf:instructions","32767","576982568","17608.647969"],["icestorm","32","kperf:instructions","32767","576938970","17607.317423"],["icestorm","32","kperf:instructions","32767","578104801","17642.896847"],["firestorm","64","kperf:instructions","131071","2289007091","17463.871421"],["firestorm","64","kperf:instructions","131071","2288542442","17460.326403"],["firestorm","64","kperf:instructions","131071","2288980734","17463.670331"],["firestorm","64","kperf:instructions","131071","2289024936","17464.007568"],["firestorm","64","kperf:instructions","131071","2289069110","17464.344592"],["firestorm","64","kperf:instructions","131071","2288980896","17463.671567"],["firestorm","64","kperf:instructions","131071","2289120791","17464.738890"],["firestorm","64","kperf:instructions","131071","2289499822","17467.630689"],["firestorm","64","kperf:instructions","131071","2289120050","17464.733236"],["firestorm","64","kperf:instructions","131071","2288893648","17463.005913"],["icestorm","64","kperf:instructions","32767","573701292","17508.508316"],["icestorm","64","kperf:instructions","65535","1150567710","17556.537881"],["icestorm","64","kperf:instructions","32767","575774920","17571.792352"],["icestorm","64","kperf:instructions","32767","576180902","17584.182318"],["icestorm","64","kperf:instructions","65535","1148808282","17529.690730"],["icestorm","64","kperf:instructions","32767","575113509","17551.607074"],["icestorm","64","kperf:instructions","32767","574730828","17539.928220"],["icestorm","64","kperf:instructions","32767","574976000","17547.410504"],["icestorm","64","kperf:instructions","32767","574844053","17543.383679"],["icestorm","64","kperf:instructions","32767","575225222","17555.016388"],["firestorm","128","kperf:instructions","131071","2285461728","17436.822241"],["firestorm","128","kperf:instructions","131071","2285801647","17439.415637"],["firestorm","128","kperf:instructions","131071","2286029716","17441.155679"],["firestorm","128","kperf:instructions","131071","2285997456","17440.909553"],["firestorm","128","kperf:instructions","131071","2285823819","17439.584798"],["firestorm","128","kperf:instructions","131071","2285824840","17439.592587"],["firestorm","128","kperf:instructions","131071","2286033363","17441.183504"],["firestorm","128","kperf:instructions","131071","2285725523","17438.834853"],["firestorm","128","kperf:instructions","131071","2285737214","17438.924049"],["firestorm","128","kperf:instructions","131071","2285625603","17438.072518"],["icestorm","128","kperf:instructions","65535","1147594401","17511.168093"],["icestorm","128","kperf:instructions","65535","1148152439","17519.683207"],["icestorm","128","kperf:instructions","65535","1150176856","17550.573831"],["icestorm","128","kperf:instructions","32767","574179583","17523.105045"],["icestorm","128","kperf:instructions","32767","573884463","17514.098422"],["icestorm","128","kperf:instructions","32767","574482148","17532.338878"],["icestorm","128","kperf:instructions","32767","573709612","17508.762230"],["icestorm","128","kperf:instructions","32767","574057534","17519.380291"],["icestorm","128","kperf:instructions","32767","574303778","17526.895291"],["icestorm","128","kperf:instructions","32767","574177149","17523.030763"]];

// allows to use array as a key for the map.
// it is most definitely not very efficient + has the same restrictions
// on elements of the key array as 
class TupleMapNode {
  constructor(v) {
    this.v = v;
    this.children = new Map();
  }
}

class TupleMap {
  constructor() {
    this.root = new TupleMapNode();
  }

  // key is a flat array where each element can be 
  // a key in JS Map. Nested arrays would not work.
  set(key, value) {
    if (!Array.isArray(key)) {
      return;
    }

    let node = this.root;
    key.forEach(e => {
      if (!node.children.has(e)) {
        node.children.set(e, new TupleMapNode());
      }
      node = node.children.get(e);
    });
    node.v = value;
  }

  // it can return internal map reference, if shrter key is provided.
  get(key) {
    if (!Array.isArray(key)) {
      return;
    }

    let node = this.root;
    key.forEach(e => {
      if (node === undefined) {
        return;
      }
      node = node.children.get(e);
    });
    if (node instanceof TupleMapNode) {
      return node.v;
    }
    return undefined;
  }

  // m is a map
  entries_rec(key_prefix, node) {
    let res = [];
    if (node.v !== undefined) {
      res.push([key_prefix, node.v]);
    }
    node.children.forEach((child, k) => {
      const key = key_prefix.concat([k]);
      res.push(...this.entries_rec(key, child));
    });
    return res;
  }

  entries() {
    return this.entries_rec([], this.root);
  }
}

function ticks(range) {
  const w = range[1] - range[0];
  // TODO: if w == 0 ?
  // TODO: configure
  let step0 = Math.log10(w);
  step0 = Math.pow(10, Math.floor(step0));
  let count = w / step0;
  let step = step0;
  if (count > 10 && count <= 20) {
    step = step * 2;
  }
  if (count > 20) {
    step = step * 5;
  }
  if (count < 3) {
    step = step / 2;
  }
  let tick = Math.floor(range[0] / step) * step;
  let res = [];
  while (tick < range[1]) {
    if (tick >= range[0]) {
      res.push(tick);
    }
    tick += step;
  }
  return res;
} 

function horisontal_axis(xr, y, xx, r) {
  let v = line(xr[0], y, xr[1], y, 'black');
  ticks(r).forEach(xt => {
    let v = line(xx(xt), y, xx(xt), y + 5, 'black');
    let t = text(xx(xt), y + 10, xt, 'y_axis_labels');
  });
}

function vertical_axis(x, ya, yb, yy, r) {
  // vertical axis
  let v = line(x, ya, x, yb, 'black');
  ticks(r).forEach(yt => {
    let v = line(x - 5, yy(yt), x, yy(yt), 'black');
    let t = text(0, yy(yt) - 2, yt, 'y_axis_labels');
  });
}

function horisontal_dots(tick_list, y_scale, x_range) {
  tick_list.forEach(y => {
    let l = line(x_range[0], y_scale(y), x_range[1], y_scale(y), 'black');
    l.setAttribute("stroke", "black");
    l.setAttribute("stroke-dasharray", "1, 1");
  });
}

function linear_axis(from, to) {
  const s = linearAxis(from, to);
  return {
    scale: s,
    ticks: () => ticks(from).map(v => [v, v])
  }
}

function linearAxis(from, to) {
  if (from[0] === from[1]) {
    return v => 0.5 * (to[0] + to[1]);
  }
  return v => { return to[0] + (to[1] - to[0]) * (v - from[0]) / (from[1] - from[0]); };
}

class FacetRender {
  constructor(x_keys, y_keys) {
    this.screen = {
      width: +svg.getAttribute("width"),
      height: +svg.getAttribute("height")
    };
    this.v_axis_width = 30;
    this.h_axis_height = 20;
    this.x_groups_height = 20;
    this.y_groups_width = 20;
    this.padding = 20; // both x and y

    this.area_width = this.screen.width - this.v_axis_width - this.y_groups_width;
    this.area_height = this.screen.height - this.h_axis_height - this.x_groups_height;

    this.each_height = (this.area_height - y_keys.length * this.padding) / y_keys.length;
    this.each_width = (this.area_width - x_keys.length * this.padding) / x_keys.length;

    this.scales = {
      x: (xi, domain) => linear_axis(domain, this.x_range(xi)).scale,
      y: (yi, domain) => {
        const y_top = this.x_groups_height + (this.padding + this.each_height) * yi;
        return linear_axis(domain, [y_top + this.each_height, y_top]).scale;
      }
    };

    this.axis = {
      x: (xi, xscaling, xdomain) => horisontal_axis(this.x_range(xi), this.screen.height - this.h_axis_height, xscaling, xdomain),
      y: (yi, yscaling, ydomain) => {
        const y_top = this.x_groups_height + (this.padding + this.each_height) * yi;
        vertical_axis(this.v_axis_width, y_top, y_top + this.each_height, yscaling, ydomain);
      }
    }

    this.facets = {
      x: (xi, X, onclick) => {
        let x_start = this.v_axis_width + (this.padding + this.each_width) * xi;
        let r = rectangle(x_start, 1, this.each_width, this.x_groups_height, '#f0f0f0', () => {});
        let t = text(x_start + this.each_width / 2, this.x_groups_height / 2, X, 'axis_caption');
        r.setAttribute("cursor", "pointer");
        r.onclick = onclick;
      },
      y: (yi, Y, onclick) => {
        const y_top = this.x_groups_height + (this.padding + this.each_height) * yi;
        let r = rectangle(this.screen.width - this.y_groups_width, y_top, this.y_groups_width, this.each_height, '#f0f0f0', () => {});
        text_vertical(this.screen.width - this.y_groups_width / 2, y_top + this.each_height / 2, Y, 'axis_caption');
        r.setAttribute("cursor", "pointer");
        r.onclick = onclick;
      }
    }
  }

  scale(d, i, domain) {
    return this.scales[d](i, domain);
  }

  facet(d, i, facet, onclick) {
    return this.facets[d](i, facet, onclick);
  }

  draw_axis(d, i, scaling, domain) {
    return this.axis[d](i, scaling, domain);
  }

  x_range(xi) {
    let x_left = this.v_axis_width + (this.padding + this.each_width) * xi;
    return [x_left, x_left + this.each_width];
  }
}

function facets(data, conf, facet_fn) {
  // "select dim_fn from data where (conf.filter) group by dim_fn"
  const keys_fn = (dim_fn) => {
    return qq_select_grouped(
      data, // from ...
      [conf.filter || (r => true)], // where ...
      [qq_count(0)], // count(0)
      [dim_fn] // group_by dim_fn
    ).map(([k, v]) => k);
  };

  const get_domain = (v_fn, k_fn) => {
    return new Map(qq_select_grouped(
      data,
      [conf.filter || (r => true)],
      [qq_min_fn(v_fn), qq_max_fn(v_fn)],
      [k_fn]
    ).map(([k, a, b]) => [k, [a, b]]));
  };

  const prepare_dimension = d => {
    let res = {};
    res.aggregation = conf.facets[d] || (row => 0);
    res.keys = keys_fn(res.aggregation);
    res.free_axis = conf.axis === "free"; // TODO = free individual
    res.axis_key_fn = res.free_axis ? res.aggregation : (row => 0);
    res.domains = get_domain(conf[d], res.axis_key_fn);
    res.dim = d;
    return res;
  };

  let x = prepare_dimension('x');
  let y = prepare_dimension('y');

  const render = new FacetRender(x.keys, y.keys);

  const scales_fn = d => {
    return new Map(d.keys.map((facet, i) => [facet, render.scale(d.dim, i, d.domains.get(d.free_axis ? facet : 0))]));
  };

  x.scales = scales_fn(x);
  y.scales = scales_fn(y);

  const update_filter = (filter) => {
    const old = conf.filter;
    conf.filter = (row => (filter(row) && old(row)));
    clear();
    facets(data, conf, facet_fn);
  }

  const draw_facet = d => d.keys.forEach((facet, i) => render.facet(d.dim, i, facet, () => update_filter(row => d.aggregation(row) === facet)));

  draw_facet(x);
  draw_facet(y);

  const draw_axis = d => d.keys.forEach((facet, i) => render.draw_axis(d.dim, i, d.scales.get(facet), d.domains.get(d.free_axis ? facet : 0)));

  draw_axis(x);
  draw_axis(y);

  let scales = {};

  y.keys.forEach((y_facet, yi) => {
    scales.y = y.scales.get(y_facet);
    y_domain = y.domains.get(y.free_axis ? y_facet : 0);

    x.keys.forEach((x_facet, xi) => {
      const node = qq_select_grouped(
        data, 
        [conf.filter || (r => true), (r => (y_facet === y.aggregation(r))), (r => (x_facet === x.aggregation(r)))],
        [qq_collect(r => r)],
        []
      );
      scales.x = x.scales.get(x_facet);

      facet_fn(node[0][0], conf, scales);

      // draw dots
      horisontal_dots(ticks(y_domain), scales.y, render.x_range(xi));
    });
  });
}

const qq_sum = (idx) => {
  return {
    acc : () => 0,
    f : (r, acc) => r[idx] + acc,
  };
};

const qq_min_fn = (v) => {
  return {
    acc : () => Number.POSITIVE_INFINITY,
    f : (r, acc) => Math.min(v(r), acc),
  };
};

const qq_max_fn = (v) => {
  return {
    acc : () => Number.NEGATIVE_INFINITY,
    f : (r, acc) => Math.max(v(r), acc),
  };
};

const qq_min = (idx) => {
  return {
    acc : () => Number.POSITIVE_INFINITY,
    f : (r, acc) => Math.min(r[idx], acc),
  };
};

const qq_max = (idx) => {
  return {
    acc : () => Number.NEGATIVE_INFINITY,
    f : (r, acc) => Math.max(r[idx], acc),
  };
};

const qq_count = (idx) => {
  return {
    acc : () => 0,
    f : (r, acc) => acc + 1,
  };
};

const qq_collect = (v) => {
  return {
    acc : () => [],
    f : (r, acc) => { acc.push(v(r)); return acc; },
  }
}

// aggregations - functions to aggregate the data (e.g. sum)
// groups - fields to aggregate over
function qq_select_grouped(data, where, aggregations, groups) {
  let res = [];
  let accumulators = new TupleMap();
  data.forEach(row => {
    if (where.map(w => w(row)).includes(false)) {
      return;
    }
    const key = groups.map(g => g(row));
    let acc = accumulators.get(key);
    if (acc === undefined) {
      acc = aggregations.map(a => a.acc());
    }
    // aggregation functions
    aggregations.forEach((a, ai) => { acc[ai] = a.f(row, acc[ai]); });
    accumulators.set(key, acc);
  });
  accumulators.entries().forEach(([k, v]) => { 
    if (k.length > 0) {
      v = k.concat(v);
    }
    res.push(v);
  });
  return res;
}

// what, where and agg are array of functions of row.
function qq_select(data, what, where) {
  let res = [];

  data.forEach(r => {
    if (where.map(w => w(r)).includes(false)) {
      return;
    }
    if (what.length > 0) {
      res.push(what.map(w => w(r)));
    }
  });
  return res;
}

let ce = v => document.createElementNS('http://www.w3.org/2000/svg', v);

function text(x, y, txt, cls) {
  let t = ce('text');
  t.setAttribute('x', x);
  t.setAttribute('y', y);
  if (cls) {
    t.setAttribute('class', cls);
  }
  t.textContent = txt;
  return add_primitive(t);
}

function text_vertical(x, y, txt, cls) {
  let t = text(0, 0, txt, cls);
  t.setAttribute("transform", `translate(${x}, ${y}) rotate(90)`);
  return t;
}

function circle(x, y, r, color, mouse_over) {
  let circle = ce('circle');
  circle.setAttribute('cx', x);
  circle.setAttribute('cy', y);
  circle.setAttribute('r', r);
  circle.setAttribute('fill', color);
  circle.onmouseover=function() {
    circle.setAttribute('r', r + 2);
    return mouse_over(circle);
  };
  circle.onmouseout=function() {
    circle.setAttribute('r', r);
  }
  return add_primitive(circle);
}

function rectangle(x, y, w, h, color, mouse_over) {
  let rect = ce('rect');
  rect.setAttribute('x', x);
  rect.setAttribute('y', y);
  rect.setAttribute('height', h);
  rect.setAttribute('width', w);
  rect.setAttribute('fill', color);
  rect.setAttribute('fill-opacity', 0.7);
  rect.onmouseover=function() {
    rect.setAttribute('fill-opacity', 0.9);
    return mouse_over(rect);
  };
  rect.onmouseout=function() {
    rect.setAttribute('fill-opacity', 0.7);
  }
  return add_primitive(rect);
}

function line(x1, y1, x2, y2, color) {
  let l = ce('line');
  l.setAttribute('x1', x1);
  l.setAttribute('y1', y1);
  l.setAttribute('x2', x2);
  l.setAttribute('y2', y2);
  l.setAttribute('stroke', color);
  return add_primitive(l);
}

// data_subset - data filtered to only part shown in this facet
// keys - all 'keys' to use for in-facet aggregation. For example, color in scatter
// yy - scaling function value -> pixel y coordinate. 
// conf - entire config. Needed for value function and color aggregation
// X, Y - facet values. Might be needed to show tooltip and such. Likely do not need it because we should get whole row? No, probably still need, as we might need to highlight the group, not individual row
// xx - scaling function from [0; 1] -> x_start, x_end
function boxplot_facet(data, conf, scales) {
  if (data === undefined) {
    return;
  }
  const r = qq_select_grouped(
    data, 
    [],
    [qq_collect(row => row)],
    [conf.x]
  ).forEach(([xv, rows]) => {
    const x = scales.x(xv);
    let values = rows.map(r => conf.y(r));
    values.sort();
    const q0 = values[0];
    const q1 = values[Math.floor(values.length / 4)]; 
    const q2 = values[values.length / 2]; 
    const q3 = values[Math.floor(3 * values.length / 4)]; 
    const q4 = values[values.length - 1];
    // box

    rectangle(x - 4, scales.y(q3), 8, scales.y(q1) - scales.y(q3));
    // whiskers
    line(x, scales.y(q0), x, scales.y(q1), 'black');
    line(x, scales.y(q4), x, scales.y(q3), 'black');
    line(x - 4, scales.y(q2), x + 4, scales.y(q2), 'black');
    line(x - 3, scales.y(q4), x + 3, scales.y(q4), 'black');
    line(x - 3, scales.y(q0), x + 3, scales.y(q0), 'black');
  });
}

function boxplot(data, conf) {
  return facets(data, conf, boxplot_facet);
}

// this is not really scatter as we 'group by' values, rather than scaling linearly.
// instead of this, we should 'define scale', which can be linear/map/whatever and pass it here.
//
// data_subset - data filtered to only part shown in this facet
// keys - all 'keys' to use for in-facet aggregation. For example, color in scatter
// yy - scaling function value -> pixel y coordinate. 
// conf - entire config. Needed for value function and color aggregation
// X, Y - facet values. Might be needed to show tooltip and such
// xx - scaling function from [0; 1] -> x_start, x_end
function scatter_facet(data, conf, scales) {
  if (data === undefined) {
    return;
  }

  const r = qq_select_grouped(
    data, 
    [],
    [qq_collect(row => row)],
    [conf.aggregations.color || (row => 0)]
  ).forEach(([c, rows]) => {
    rows.forEach(r => {
      const x = scales.x(conf.x(r));
      const y = scales.y(conf.y(r));
      circle(x, y, 2, "#ff0000", () => {});
    });
  });
}

function scatter(data, conf) {
  return facets(data, conf, scatter_facet);
}

  boxplot(data, conf);
}]]>
</script>
</svg>

